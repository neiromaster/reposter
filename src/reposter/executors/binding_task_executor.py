from ..config.settings import Settings
from ..interfaces.task_executor import BaseTaskExecutor
from ..managers.telegram_manager import TelegramManager
from ..managers.vk_manager import VKManager
from ..managers.ytdlp_manager import YTDLPManager


class BindingTaskExecutor(BaseTaskExecutor):
    """
    Implementation of business logic: processing VK ‚Üí Telegram bindings.
    """

    def __init__(self, vk_manager: VKManager, telegram_manager: TelegramManager, ytdlp_manager: YTDLPManager):
        self.vk_manager = vk_manager
        self.telegram_manager = telegram_manager
        self.ytdlp_manager = ytdlp_manager

    async def execute(self, settings: Settings) -> None:
        print(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(settings.bindings)} –ø—Ä–∏–≤—è–∑–æ–∫...")

        for binding in settings.bindings:
            print(f"  ‚Üí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–∏–≤—è–∑–∫—É: {binding.vk.domain} ‚Üí {binding.telegram.channel_ids}")

            try:
                print(f"  üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å—Ç—ã –∏–∑ VK: {binding.vk.domain}")
                posts = await self.vk_manager.get_vk_wall(
                    domain=binding.vk.domain,
                    post_count=binding.vk.post_count,
                    post_source=binding.vk.post_source,
                )

                print(posts)

                print("  üé• –°–∫–∞—á–∏–≤–∞—é –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)...")
                # await self.ytdlp_manager.download_media(posts)

                print(f"  ‚úàÔ∏è –ü—É–±–ª–∏–∫—É—é –≤ Telegram –∫–∞–Ω–∞–ª—ã: {binding.telegram.channel_ids}")
                # await self.telegram_manager.post_to_channels(binding.telegram.channel_ids, posts)

                print(f"  ‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ {binding.vk.domain} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≤—è–∑–∫–∏ {binding.vk.domain}: {type(e).__name__}: {e}")
