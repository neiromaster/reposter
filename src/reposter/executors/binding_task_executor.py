from ..config.settings import Settings
from ..core.post_processor import PostProcessor
from ..core.state_manager import get_last_post_id, set_last_post_id
from ..interfaces.task_executor import BaseTaskExecutor
from ..managers.telegram_manager import TelegramManager
from ..managers.vk_manager import VKManager
from ..managers.ytdlp_manager import YTDLPManager
from ..models.dto import TelegramPost
from ..utils.log import log


class BindingTaskExecutor(BaseTaskExecutor):
    """
    Implementation of business logic: processing VK ‚Üí Telegram bindings.
    """

    def __init__(
        self,
        vk_manager: VKManager,
        telegram_manager: TelegramManager,
        ytdlp_manager: YTDLPManager,
        post_processor: PostProcessor,
    ):
        self.vk_manager = vk_manager
        self.telegram_manager = telegram_manager
        self.ytdlp_manager = ytdlp_manager
        self.post_processor = post_processor

    async def execute(self, settings: Settings) -> None:
        log(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(settings.bindings)} –ø—Ä–∏–≤—è–∑–æ–∫...")

        for binding in settings.bindings:
            log(f"üîó ‚Üí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–∏–≤—è–∑–∫—É: {binding.vk.domain} ‚Üí {binding.telegram.channel_ids}", indent=1)

            try:
                last_post_id = await get_last_post_id(binding.vk.domain, settings.app.state_file)

                posts = await self.vk_manager.get_vk_wall(
                    domain=binding.vk.domain,
                    post_count=binding.vk.post_count,
                    post_source=binding.vk.post_source,
                )

                new_posts = sorted([post for post in posts if post.id > last_post_id], key=lambda p: p.date)

                if not new_posts:
                    log("‚úÖ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.", indent=2)
                    continue

                log(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(new_posts)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤. –ù–∞—á–∏–Ω–∞—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...", indent=2)

                for post in new_posts:
                    try:
                        log(f"‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ—Å—Ç {post.id}...", indent=3)
                        prepared_post = await self.post_processor.process_post(post)

                        if not prepared_post.attachments and not prepared_post.text:
                            log("‚ö†Ô∏è –ü–æ—Å—Ç –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞—é.", indent=4)
                            await set_last_post_id(binding.vk.domain, post.id, settings.app.state_file)
                            continue

                        log(f"‚úàÔ∏è –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç {post.id} –≤ Telegram –∫–∞–Ω–∞–ª—ã...", indent=3)
                        await self.telegram_manager.post_to_channels(binding.telegram, [prepared_post])

                        # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
                        await set_last_post_id(binding.vk.domain, post.id, settings.app.state_file)
                        log(f"‚úÖ –ü–æ—Å—Ç {post.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.", indent=4)

                    except Exception as e:
                        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ {post.id}: {e}. –ü—Ä–æ–ø—É—Å–∫–∞—é –µ–≥–æ.", indent=3)
                        # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º last_post_id, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
                        continue

                log(f"‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ {binding.vk.domain} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", indent=2)

            except Exception as e:
                log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ {binding.vk.domain}: {e}", indent=2)
