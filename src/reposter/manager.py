import asyncio
import signal
import sys
from types import FrameType

import aioconsole


class AppManager:
    """
    A cross-platform application manager.
    Supports graceful shutdown on Ctrl+C, starting tasks on Enter,
    and is resilient to exceptions by logging and continuing work.
    Works on Windows and Linux.
    """

    def __init__(self, period: int = 10):
        self._period = period
        self._force_run_event = asyncio.Event()
        self._stop_app_event = asyncio.Event()

    async def _my_task(self):
        """You can place your task's code here."""
        print("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–æ—è –∑–∞–¥–∞—á–∞...")
        await asyncio.sleep(1)

    async def _input_watcher(self):
        """Asynchronously waits for the Enter key and sets the force_run_event."""
        while not self._stop_app_event.is_set():
            try:
                await aioconsole.ainput()
                if not self._stop_app_event.is_set():
                    print("\nEnter –Ω–∞–∂–∞—Ç, –∑–∞–ø—É—Å–∫–∞—é –∑–∞–¥–∞—á—É –≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏...")
                    self._force_run_event.set()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ input_watcher: {e}")

    async def _periodic_wrapper(self):
        """Wraps the periodic task and controls the loop."""
        while not self._stop_app_event.is_set():
            try:
                await self._my_task()
                try:
                    print(f"–û–∂–∏–¥–∞—é {self._period} —Å–µ–∫—É–Ω–¥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)...")
                    await asyncio.wait_for(self._force_run_event.wait(), timeout=self._period)
                except TimeoutError:
                    pass

                if self._force_run_event.is_set():
                    self._force_run_event.clear()

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ: {e}")
                await asyncio.sleep(1)

    def _shutdown_handler(self, signum: int, frame: FrameType | None) -> None:
        """Handles shutdown signals (synchronous)."""
        loop = asyncio.get_running_loop()
        loop.call_soon_threadsafe(self._stop_app_event.set)
        print(f"\nüõë –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")

    def _setup_signal_handlers(self):
        """Sets up signal handlers cross-platform."""
        signal.signal(signal.SIGINT, self._shutdown_handler)
        if sys.platform != "win32":
            signal.signal(signal.SIGTERM, self._shutdown_handler)

    async def run(self):
        """The main entry point that sets up and runs the application."""
        self._setup_signal_handlers()

        print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

        while not self._stop_app_event.is_set():
            try:
                async with asyncio.TaskGroup() as tg:
                    tg.create_task(self._input_watcher())
                    tg.create_task(self._periodic_wrapper())
                    await self._stop_app_event.wait()

            except* Exception as eg:
                for exc in eg.exceptions:
                    print(f"üí• –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∑–∞–¥–∞—á–µ: {type(exc).__name__}: {exc}")
                if not self._stop_app_event.is_set():
                    print("üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è...")

        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
