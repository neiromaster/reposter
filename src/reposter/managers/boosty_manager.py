from __future__ import annotations

import asyncio
import json
import os
from asyncio import Event
from pathlib import Path
from types import TracebackType
from typing import Any
from urllib.parse import urljoin

import aiofiles
import httpx
from tqdm import tqdm

from ..config.settings import BoostyConfig, Settings
from ..interfaces.base_manager import BaseManager
from ..models.dto import BoostyAuthData, PreparedVideoAttachment, TelegramPost
from ..utils.log import log
from ..utils.text_utils import extract_tags_from_text


class BoostyManager(BaseManager):
    """Manages Boosty API client and handles posting content to Boosty."""

    BASE_URL = "https://api.boosty.to"

    def __init__(self) -> None:
        """Initialize the manager."""
        super().__init__()
        self._initialized = False
        self._client: httpx.AsyncClient | None = None
        self._blog_name: str = ""
        self._access_token: str | None = None
        self._device_id: str | None = None
        self._auth_path: str = "auth.json"

    def set_shutdown_event(self, event: Event) -> None:
        """Sets the shutdown event from the AppManager."""
        super().set_shutdown_event(event)

    async def setup(self, settings: Settings) -> None:
        """Initialize the Boosty manager and the HTTP client."""
        if self._initialized:
            log("üöÄ [Boosty] –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...", indent=1)
            await self.shutdown()

        log("üöÄ [Boosty] –ó–∞–ø—É—Å–∫...", indent=1)

        self._client = httpx.AsyncClient(
            timeout=httpx.Timeout(30.0, connect=10.0),
            follow_redirects=True,
        )

        self._initialized = True
        log("üöÄ [Boosty] –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.", indent=1)

    async def _authorize(self, blog_name: str) -> None:
        """Authorize using auth.json file for specific blog."""
        log(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Boosty –¥–ª—è –±–ª–æ–≥–∞ {blog_name}...", indent=2)

        if not os.path.exists(self._auth_path):
            raise FileNotFoundError(f"–§–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self._auth_path}")

        async with aiofiles.open(self._auth_path, encoding="utf-8") as f:
            auth_data_content = await f.read()
            auth_data_dict = json.loads(auth_data_content)
            auth_data = BoostyAuthData.model_validate(auth_data_dict)

        self._access_token = auth_data.access_token
        self._device_id = auth_data.device_id
        self._blog_name = blog_name

        if not self._access_token or not self._device_id:
            raise Exception("access_token –∏ device_id –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–∞–π–ª–µ auth.json")

        if self._client:
            self._client.headers.update(
                {
                    "Authorization": f"Bearer {self._access_token}",
                    "x-from-id": self._device_id,
                    "x-app": "web",
                }
            )
        log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", indent=2)

    async def update_config(self, settings: Settings) -> None:
        """Handles configuration updates."""
        if not self._initialized:
            await self.setup(settings)
            return

        log("üöÄ [Boosty] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", indent=1)

    async def shutdown(self) -> None:
        """Initiates shutdown and closes the client."""
        if not self._initialized:
            return
        log("üöÄ [Boosty] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...", indent=1)
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        if self._client:
            await self._client.aclose()
        self._initialized = False
        log("üöÄ [Boosty] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", indent=1)

    async def __aenter__(self) -> BoostyManager:
        """Enter the async context manager."""
        return self

    async def __aexit__(
        self,
        exc_type: type[BaseException] | None,
        exc_val: BaseException | None,
        exc_tb: TracebackType | None,
    ) -> None:
        """Exit the async context manager and shutdown the client."""
        await self.shutdown()

    async def _sleep_cancelable(self, seconds: int) -> None:
        """Sleep for specified seconds, but can be cancelled by shutdown event."""
        remaining = float(seconds)
        step = 0.25
        while remaining > 0 and (not self._shutdown_event or not self._shutdown_event.is_set()):
            await asyncio.sleep(step)
            remaining -= step

    async def upload_video(self, video_path: str | Path) -> dict[str, Any] | None:
        """Uploads a video to Boosty."""
        if not self._initialized or not self._client:
            raise RuntimeError("Boosty manager not initialized. Call setup() first.")

        if not os.path.exists(video_path):
            raise FileNotFoundError(f"–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_path}")

        self._check_shutdown()

        video_path = str(video_path)
        file_size = os.path.getsize(video_path)
        filename = os.path.basename(video_path)

        log(f"üì• [Boosty] –®–∞–≥ 1/3: –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {filename}", indent=2)

        prepare_url = urljoin(self.BASE_URL, "/v1/media_data/video/upload_url")
        params = {"file_name": filename, "container_type": "post_draft"}

        prepare_response = await self._client.get(prepare_url, params=params)

        self._check_shutdown()

        if prepare_response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {prepare_response.status_code} - {prepare_response.text}")

        upload_data = prepare_response.json()
        upload_url = upload_data["uploadUrl"]
        media_id = upload_data["id"]

        log(f"üì• [Boosty] URL –ø–æ–ª—É—á–µ–Ω. –í—Ä–µ–º–µ–Ω–Ω—ã–π ID: {media_id}", indent=2)
        log("üì• [Boosty] –®–∞–≥ 2/3: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏)...", indent=2)

        async with aiofiles.open(video_path, "rb") as f:
            with tqdm(total=file_size, unit="B", unit_scale=True, desc="–ó–∞–≥—Ä—É–∑–∫–∞", mininterval=0.5) as pbar:
                offset = 0
                chunk_size = 1024 * 1024  # 1MB chunks
                while True:
                    self._check_shutdown()

                    chunk = await f.read(chunk_size)
                    if not chunk:
                        break

                    start_byte = offset
                    end_byte = offset + len(chunk) - 1

                    headers = {
                        "Content-Disposition": f'attachment; filename="{filename}"',
                        "Content-Range": f"bytes {start_byte}-{end_byte}/{file_size}",
                        "Content-Type": "application/octet-stream",
                        "Origin": "https://boosty.to",
                        "Referer": f"https://boosty.to/{self._blog_name}/new-post",
                        "X-Uploading-Mode": "parallel",
                    }

                    max_retries = 3
                    retry_delay = 5  # seconds
                    for attempt in range(max_retries):
                        self._check_shutdown()

                        try:
                            response = await self._client.post(
                                upload_url,
                                content=chunk,
                                headers=headers,
                                timeout=30.0,  # 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                            )
                            if response.status_code not in [200, 201]:
                                raise Exception(f"HTTP {response.status_code}")

                            break
                        except Exception as e:
                            if attempt < max_retries - 1:
                                self._check_shutdown()

                                log(
                                    f"üì• [Boosty] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞: {e}. "
                                    f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...",
                                    indent=3,
                                )
                                await self._sleep_cancelable(retry_delay)
                            else:
                                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞–Ω–∫ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}") from None

                    offset += len(chunk)
                    pbar.update(len(chunk))

        log("üì• [Boosty] –í–∏–¥–µ–æ—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω.", indent=2)
        log("üì• [Boosty] –®–∞–≥ 3/3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Boosty...", indent=2)

        finish_url = urljoin(self.BASE_URL, f"/v1/media_data/video/{media_id}/finish")
        finish_response = await self._client.post(finish_url)

        self._check_shutdown()

        if finish_response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {finish_response.status_code} - {finish_response.text}")

        video_data = finish_response.json()
        log(f"üì• [Boosty] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ–≤—ã–π ID –≤–∏–¥–µ–æ: {video_data.get('id')}", indent=2)

        return video_data

    async def create_post(self, boosty_config: BoostyConfig, post: TelegramPost) -> dict[str, Any] | None:
        """Creates a post on Boosty."""
        if not self._initialized:
            raise RuntimeError("Boosty manager not initialized. Call setup() first.")

        self._check_shutdown()

        await self._authorize(boosty_config.blog_name)

        log(f"üì§ [Boosty] –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –±–ª–æ–≥ {boosty_config.blog_name}", indent=2)

        video_data = None
        for attachment in post.attachments:
            if isinstance(attachment, PreparedVideoAttachment):
                try:
                    video_data = await self.upload_video(attachment.file_path)
                    break
                except Exception as e:
                    log(f"‚ùå [Boosty] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}", indent=3)

            self._check_shutdown()

        content_blocks: list[dict[str, Any]] = []
        if video_data:
            content_blocks.append(video_data)
        if post.text:
            content_blocks.append(
                {"type": "text", "modificator": "", "content": json.dumps([post.text, "unstyled", []])}
            )
        if content_blocks:
            content_blocks.append({"content": "", "type": "text", "modificator": "BLOCK_END"})

        teaser_text = (post.text or "–ù–æ–≤—ã–π –ø–æ—Å—Ç")[:150]
        teaser_blocks = [
            {"type": "text", "modificator": "", "content": json.dumps([teaser_text, "unstyled", []])},
            {"content": "", "type": "text", "modificator": "BLOCK_END"},
        ]

        tags = extract_tags_from_text(post.text or "")
        form_data = {
            "title": "–ù–æ–≤—ã–π –ø–æ—Å—Ç",
            "data": json.dumps(content_blocks),
            "teaser_data": json.dumps(teaser_blocks),
            "tags": json.dumps(tags),
            "deny_comments": "false",
            "wait_video": "false",
            "price": 0,
        }

        publish_url = urljoin(self.BASE_URL, f"/v1/blog/{self._blog_name}/post_draft/publish/")

        log("üì§ [Boosty] –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞...", indent=3)

        if not self._client:
            raise RuntimeError("HTTP client not initialized")

        response = await self._client.post(publish_url, data=form_data)

        self._check_shutdown()

        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {response.status_code} ‚Äî {response.text}")

        result = response.json()
        post_data = result.get("data", {}).get("post", {})
        post_id = post_data.get("id")
        post_url = f"https://boosty.to/{self._blog_name}/posts/{post_id}" if post_id else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É"

        log(f"üì§ [Boosty] –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –°—Å—ã–ª–∫–∞: {post_url}", indent=3)
        return result
