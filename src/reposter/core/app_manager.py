import asyncio
import signal
import sys
from collections.abc import Sequence
from typing import Any

import aioconsole

from ..interfaces.base_manager import BaseManager
from ..interfaces.task_executor import BaseTaskExecutor
from .settings_manager import SettingsManager


class AppManager:
    def __init__(
        self,
        managers: Sequence[BaseManager],
        task_executor: BaseTaskExecutor,
    ) -> None:
        self._managers = managers
        self._task_executor = task_executor
        self._force_run_event = asyncio.Event()
        self._stop_app_event = asyncio.Event()
        self._settings_manager = SettingsManager()

    async def _execute_task(self) -> None:
        """Wrapper for executing a task - contains no business logic."""
        try:
            settings = self._settings_manager.get_settings()
            await self._task_executor.execute(settings)
            print("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {type(e).__name__}: {e}")

    async def _input_watcher(self) -> None:
        """Asynchronously waits for the Enter key and sets the force_run_event."""
        while not self._stop_app_event.is_set():
            try:
                await aioconsole.ainput()
                if not self._stop_app_event.is_set():
                    print("\nEnter –Ω–∞–∂–∞—Ç, –∑–∞–ø—É—Å–∫–∞—é –∑–∞–¥–∞—á—É –≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏...")
                    self._force_run_event.set()
            except (asyncio.CancelledError, EOFError):
                break
            except Exception as e:
                if not self._stop_app_event.is_set():
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ input_watcher: {type(e).__name__}: {e}")

    async def _periodic_wrapper(self) -> None:
        """Wraps the periodic task and controls the loop ‚Äî now supports instant shutdown."""
        while not self._stop_app_event.is_set():
            try:
                await self._execute_task()
                try:
                    settings = self._settings_manager.get_settings()
                    timeout = settings.app.wait_time_seconds

                    wait_force = asyncio.create_task(self._force_run_event.wait())
                    wait_stop = asyncio.create_task(self._stop_app_event.wait())

                    print(f"–û–∂–∏–¥–∞—é {timeout} —Å–µ–∫...")
                    try:
                        _, pending = await asyncio.wait(
                            [wait_force, wait_stop],
                            timeout=timeout,
                            return_when=asyncio.FIRST_COMPLETED,
                        )

                        for task in pending:
                            task.cancel()

                        if self._stop_app_event.is_set():
                            print("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Äî –ø—Ä–µ—Ä—ã–≤–∞—é –æ–∂–∏–¥–∞–Ω–∏–µ.")
                            break

                        if self._force_run_event.is_set():
                            self._force_run_event.clear()

                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {e}")
                except TimeoutError:
                    pass

                if self._force_run_event.is_set():
                    self._force_run_event.clear()

            except Exception as e:
                if not self._stop_app_event.is_set():
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ: {type(e).__name__}: {e}")
                await asyncio.sleep(1)

    def _shutdown_handler(self, signum: int, frame: Any) -> None:
        loop = asyncio.get_running_loop()
        loop.call_soon_threadsafe(self._stop_app_event.set)
        print(f"\nüõë –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")

    def _setup_signal_handlers(self) -> None:
        signal.signal(signal.SIGINT, self._shutdown_handler)
        if sys.platform != "win32":
            signal.signal(signal.SIGTERM, self._shutdown_handler)

    async def run(self) -> None:
        """Main loop - manages the lifecycle, but not the business logic."""
        settings = self._settings_manager.get_settings()

        print("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
        for manager in self._managers:
            await manager.setup(settings)

        self._setup_signal_handlers()
        print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

        try:
            while not self._stop_app_event.is_set():
                settings = self._settings_manager.get_settings()
                for manager in self._managers:
                    await manager.update_config(settings)

                try:
                    async with asyncio.TaskGroup() as tg:
                        tg.create_task(self._input_watcher())
                        tg.create_task(self._periodic_wrapper())
                        await self._stop_app_event.wait()
                except* Exception as eg:
                    for exc in eg.exceptions:
                        if not self._stop_app_event.is_set():
                            print(f"üí• –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∑–∞–¥–∞—á–µ: {type(exc).__name__}: {exc}")
                    if not self._stop_app_event.is_set():
                        print("üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è...")
        finally:
            print("üîå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
            for manager in self._managers:
                await manager.shutdown()
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
